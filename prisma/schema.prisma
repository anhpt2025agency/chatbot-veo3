// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  apiKeys  ApiKey[]
  chats    Chat[]
  styles   ContentStyle[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Chatbot specific models
model ApiKey {
  id       String @id @default(cuid())
  userId   String
  provider String // 'openai', 'gemini', 'claude', 'flux'
  keyValue String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider])
}

model Chat {
  id        String     @id @default(cuid())
  userId    String
  title     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
}

model Message {
  id        String   @id @default(cuid())
  chatId    String
  type      String   // 'user' or 'bot'
  content   String
  createdAt DateTime @default(now())
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model ContentStyle {
  id           String @id @default(cuid())
  userId       String
  name         String
  description  String
  icon         String
  systemPrompt String
  isBuiltIn    Boolean @default(false)
  isHidden     Boolean @default(false)
  createdAt    DateTime @default(now())
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
} 