'use client'

import { useState, useEffect } from 'react'
import { useSession } from 'next-auth/react'
import { Sparkles, Copy, Check, Plus, Trash2, AlertCircle, Loader2 } from 'lucide-react'

interface Character {
  id: string
  name: string
  appearance: string
  voiceStyle: string
  dialogue: string
}

export default function VEO3PromptGenerator() {
  const { data: session } = useSession()
  const [apiKeys, setApiKeys] = useState<Record<string, string>>({})
  const [sceneContext, setSceneContext] = useState('')
  const [characters, setCharacters] = useState<Character[]>([
    { id: '1', name: '', appearance: '', voiceStyle: '', dialogue: '' }
  ])
  const [ambientSound, setAmbientSound] = useState('')
  const [aspectRatio, setAspectRatio] = useState('16:9')
  const [cameraAngle, setCameraAngle] = useState('')
  const [additionalConditions, setAdditionalConditions] = useState('')
  const [generatedPrompt, setGeneratedPrompt] = useState('')
  const [showCopied, setShowCopied] = useState(false)
  const [isGenerating, setIsGenerating] = useState(false)
  const [error, setError] = useState('')

  // Load API keys when component mounts
  useEffect(() => {
    if (session?.user?.id) {
      loadApiKeys()
    }
  }, [session])

  const loadApiKeys = async () => {
    try {
      const response = await fetch('/api/user/api-keys')
      if (response.ok) {
        const data = await response.json()
        setApiKeys(data.apiKeys || {})
      }
    } catch (error) {
      console.error('Error loading API keys:', error)
    }
  }

  const addCharacter = () => {
    const newId = (characters.length + 1).toString()
    setCharacters([...characters, { id: newId, name: '', appearance: '', voiceStyle: '', dialogue: '' }])
  }

  const removeCharacter = (id: string) => {
    if (characters.length > 1) {
      setCharacters(characters.filter(char => char.id !== id))
    }
  }

  const updateCharacter = (id: string, field: keyof Character, value: string) => {
    setCharacters(characters.map(char => 
      char.id === id ? { ...char, [field]: value } : char
    ))
  }

  const generatePrompt = async () => {
    if (!sceneContext.trim()) {
      setError('Vui l√≤ng nh·∫≠p B·ªëi c·∫£nh c·∫£nh!')
      return
    }

    const fluxApiKey = apiKeys['flux']
    if (!fluxApiKey) {
      setError('Vui l√≤ng c·∫•u h√¨nh Flux API key trong ph·∫ßn Qu·∫£n l√Ω API Keys!')
      return
    }

    setIsGenerating(true)
    setError('')
    
    try {
      // T·∫°o prompt t·ª´ input
      let prompt = sceneContext.trim()
      
      // Add characters if they have content
      const validCharacters = characters.filter(char => 
        char.name.trim() || char.appearance.trim() || char.voiceStyle.trim() || char.dialogue.trim()
      )
      
      if (validCharacters.length > 0) {
        prompt += '\n\nNh√¢n v·∫≠t:'
        validCharacters.forEach((char, index) => {
          prompt += `\n- Nh√¢n v·∫≠t ${index + 1}:`
          if(char.name.trim()) prompt += ` ${char.name.trim()}`
          if(char.appearance.trim()) prompt += `, ${char.appearance.trim()}`
          if(char.voiceStyle.trim()) prompt += `, gi·ªçng n√≥i: ${char.voiceStyle.trim()}`
          if(char.dialogue.trim()) prompt += `, n√≥i: "${char.dialogue.trim()}"`
        })
      }
      
      // Add technical specifications
      const specs = []
      if (ambientSound.trim()) specs.push(`√Çm thanh: ${ambientSound.trim()}`)
      if (aspectRatio) specs.push(`T·ª∑ l·ªá khung h√¨nh: ${aspectRatio}`)
      if (cameraAngle.trim()) specs.push(`G√≥c m√°y: ${cameraAngle.trim()}`)
      
      if (specs.length > 0) {
        prompt += `\n\n${specs.join(', ')}`
      }
      
      if (additionalConditions.trim()) {
        prompt += `\n\nY√™u c·∫ßu th√™m: ${additionalConditions.trim()}`
      }

      // G·ªçi API VEO3 th·∫≠t
      const response = await fetch('/api/flux/veo3', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          prompt: prompt.trim(),
          apiKey: fluxApiKey,
          options: {
            aspect_ratio: aspectRatio,
            duration: 5, // 5 seconds default
            quality: 'high'
          }
        }),
      })

      const data = await response.json()

      if (!response.ok) {
        throw new Error(data.error || `HTTP error! status: ${response.status}`)
      }

      if (data.success) {
        // N·∫øu API tr·∫£ v·ªÅ k·∫øt qu·∫£ th√†nh c√¥ng
        if (data.data && data.data.result) {
          setGeneratedPrompt(`‚úÖ Video ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!

üìù Prompt g·ªëc:
${prompt.trim()}

üé¨ K·∫øt qu·∫£ t·ª´ VEO3:
${JSON.stringify(data.data, null, 2)}

üì• ƒê·ªÉ t·∫£i video, vui l√≤ng ki·ªÉm tra link trong response tr√™n.`)
        } else {
          setGeneratedPrompt(`‚úÖ Y√™u c·∫ßu ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!

üìù Prompt ƒë√£ g·ª≠i:
${prompt.trim()}

‚è≥ ƒêang x·ª≠ l√Ω... Vui l√≤ng ki·ªÉm tra k·∫øt qu·∫£ sau √≠t ph√∫t.

üìä Response:
${JSON.stringify(data, null, 2)}`)
        }
      } else {
        throw new Error(data.error || 'Kh√¥ng th·ªÉ t·∫°o video')
      }

    } catch (error) {
      console.error('VEO3 API error:', error)
      
      let errorMessage = 'L·ªói khi g·ªçi API VEO3!'
      
      if (error instanceof Error) {
        if (error.message.includes('401')) {
          errorMessage = 'API key kh√¥ng h·ª£p l·ªá! Vui l√≤ng ki·ªÉm tra l·∫°i.'
        } else if (error.message.includes('403')) {
          errorMessage = 'Kh√¥ng ƒë·ªß quy·ªÅn truy c·∫≠p ho·∫∑c h·∫øt credits!'
        } else if (error.message.includes('429')) {
          errorMessage = 'Qu√° nhi·ªÅu y√™u c·∫ßu! Vui l√≤ng th·ª≠ l·∫°i sau.'
        } else if (error.message.includes('500')) {
          errorMessage = 'L·ªói server! Vui l√≤ng th·ª≠ l·∫°i sau.'
        } else {
          errorMessage = `L·ªói: ${error.message}`
        }
      }
      
      setError(errorMessage)
      
      // Hi·ªÉn th·ªã prompt ƒë√£ t·∫°o ƒë·ªÉ user c√≥ th·ªÉ copy
      let fallbackPrompt = sceneContext.trim()
      const fallbackValidCharacters = characters.filter(char => 
        char.name.trim() || char.appearance.trim() || char.voiceStyle.trim() || char.dialogue.trim()
      )
      if (fallbackValidCharacters.length > 0) {
        fallbackPrompt += '\n\nNh√¢n v·∫≠t:'
        fallbackValidCharacters.forEach((char, index) => {
          fallbackPrompt += `\n- Nh√¢n v·∫≠t ${index + 1}:`
          if(char.name.trim()) fallbackPrompt += ` ${char.name.trim()}`
          if(char.appearance.trim()) fallbackPrompt += `, ${char.appearance.trim()}`
          if(char.voiceStyle.trim()) fallbackPrompt += `, gi·ªçng n√≥i: ${char.voiceStyle.trim()}`
          if(char.dialogue.trim()) fallbackPrompt += `, n√≥i: "${char.dialogue.trim()}"`
        })
      }
      
      const specs = []
      if (ambientSound.trim()) specs.push(`√Çm thanh: ${ambientSound.trim()}`)
      if (aspectRatio) specs.push(`T·ª∑ l·ªá khung h√¨nh: ${aspectRatio}`)
      if (cameraAngle.trim()) specs.push(`G√≥c m√°y: ${cameraAngle.trim()}`)
      
      if (specs.length > 0) {
        fallbackPrompt += `\n\n${specs.join(', ')}`
      }
      
      if (additionalConditions.trim()) {
        fallbackPrompt += `\n\nY√™u c·∫ßu th√™m: ${additionalConditions.trim()}`
      }
      
      setGeneratedPrompt(`‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi API, nh∆∞ng ƒë√¢y l√† prompt ƒë√£ t·∫°o:

${fallbackPrompt.trim()}

üí° B·∫°n c√≥ th·ªÉ copy prompt n√†y v√† s·ª≠ d·ª•ng tr·ª±c ti·∫øp tr√™n website VEO3.`)
      
    } finally {
      setIsGenerating(false)
    }
  }

  const copyPrompt = () => {
    if (generatedPrompt) {
      navigator.clipboard.writeText(generatedPrompt)
      setShowCopied(true)
      setTimeout(() => setShowCopied(false), 2000)
    }
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="text-center mb-8">
        <h2 className="text-3xl font-bold text-white mb-2 flex items-center justify-center gap-3">
          üé¨ Tr√¨nh T·∫°o Prompt VEO3
        </h2>
        <p className="text-gray-300">T·∫°o prompt ch·∫•t l∆∞·ª£ng cao cho vi·ªác t·∫°o video VEO3</p>
        {apiKeys['flux'] ? (
          <div className="mt-2 text-sm text-green-400">
            ‚úÖ Flux API key ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh - S·∫µn s√†ng t·∫°o video th·∫≠t!
          </div>
        ) : (
          <div className="mt-2 text-sm text-yellow-400">
            ‚ö†Ô∏è Vui l√≤ng c·∫•u h√¨nh Flux API key trong ph·∫ßn Qu·∫£n l√Ω API Keys ƒë·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng t·∫°o video
          </div>
        )}
      </div>

      {error && (
        <div className="bg-red-900/50 border border-red-500 rounded-lg p-4 flex items-center gap-3 mb-6">
          <AlertCircle className="text-red-400" size={20} />
          <span className="text-red-300">{error}</span>
        </div>
      )}

      <div className="grid grid-cols-1 xl:grid-cols-2 gap-8">
        {/* Input Section */}
        <div className="space-y-6">
          <div>
            <label className="block text-sm font-medium text-gray-300 mb-2">
              B·ªëi c·∫£nh c·∫£nh
            </label>
            <textarea
              value={sceneContext}
              onChange={(e) => setSceneContext(e.target.value)}
              placeholder="v√≠ d·ª•: Bu·ªïi s√°ng s·ªõm trong m·ªôt qu√°n c√† ph√™ nh·ªè b√™n b·ªù s√¥ng S√†i G√≤n..."
              className="w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none text-white placeholder-gray-400"
              rows={4}
            />
            <p className="text-xs text-gray-500 mt-1">V√≠ d·ª•: Hai ph·ª• n·ªØ tr√≤ chuy·ªán. M·ªôt ng∆∞·ªùi h·ªèi c√¢u h·ªèi, ng∆∞·ªùi kia ƒë∆∞a ra c√¢u tr·∫£ l·ªùi tinh ngh·ªãch.</p>
          </div>

          {/* Characters Section */}
          <div>
            <label className="block text-sm font-medium text-gray-300 mb-3">
              Nh√¢n v·∫≠t {characters.length > 1 ? '' : ''}
            </label>
            <div className="space-y-4">
              {characters.map((character, index) => (
                <div key={character.id} className="bg-gray-800 border border-gray-600 rounded-lg p-4">
                  <div className="flex items-center justify-between mb-3">
                    <h4 className="font-medium text-gray-200">Nh√¢n v·∫≠t {index + 1}</h4>
                    {characters.length > 1 && (
                      <button
                        onClick={() => removeCharacter(character.id)}
                        className="p-1 text-red-400 hover:bg-red-900/30 rounded transition-colors"
                      >
                        <Trash2 size={16} />
                      </button>
                    )}
                  </div>
                  
                  <div className="space-y-3">
                    <input
                      type="text"
                      value={character.name}
                      onChange={(e) => updateCharacter(character.id, 'name', e.target.value)}
                      placeholder="T√™n v√≠ d·ª•: Anna"
                      className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-white placeholder-gray-400"
                    />
                    <input
                      type="text"
                      value={character.appearance}
                      onChange={(e) => updateCharacter(character.id, 'appearance', e.target.value)}
                      placeholder="Ngo·∫°i h√¨nh v√≠ d·ª•: M·ªôt ph·ª• n·ªØ 30 tu·ªïi..."
                      className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-white placeholder-gray-400"
                    />
                    <input
                      type="text"
                      value={character.voiceStyle}
                      onChange={(e) => updateCharacter(character.id, 'voiceStyle', e.target.value)}
                      placeholder="Phong c√°ch gi·ªçng n√≥i v√≠ d·ª•: Nh·∫π nh√†ng v√† d·ªãu d√†ng..."
                      className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-white placeholder-gray-400"
                    />
                    <input
                      type="text"
                      value={character.dialogue}
                      onChange={(e) => updateCharacter(character.id, 'dialogue', e.target.value)}
                      placeholder="L·ªùi tho·∫°i v√≠ d·ª•: Cu·ªôc s·ªëng th·∫≠t kh√≥ khƒÉn..."
                      className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-white placeholder-gray-400"
                    />
                  </div>
                </div>
              ))}
              
              <button
                onClick={addCharacter}
                className="flex items-center gap-2 text-blue-400 hover:text-blue-300 font-medium transition-colors"
              >
                <Plus size={16} />
                + Th√™m nh√¢n v·∫≠t kh√°c
              </button>
            </div>
          </div>

          {/* Additional Settings */}
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">
                √Çm thanh xung quanh
              </label>
              <input
                type="text"
                value={ambientSound}
                onChange={(e) => setAmbientSound(e.target.value)}
                placeholder="v√≠ d·ª•: Ti·∫øng ·ªìn ƒë∆∞·ªùng ph·ªë v·ªõi ti·∫øng rao b√°n tr√°i c√¢y xa xa..."
                className="w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-white placeholder-gray-400"
              />
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  T·ª∑ l·ªá khung h√¨nh
                </label>
                <select
                  value={aspectRatio}
                  onChange={(e) => setAspectRatio(e.target.value)}
                  className="w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-white"
                >
                  <option value="16:9">16:9 (M√†n h√¨nh r·ªông)</option>
                  <option value="9:16">9:16 (D·ªçc)</option>
                  <option value="1:1">1:1 (Vu√¥ng)</option>
                  <option value="4:3">4:3 (Truy·ªÅn th·ªëng)</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  G√≥c m√°y quay
                </label>
                <input
                  type="text"
                  value={cameraAngle}
                  onChange={(e) => setCameraAngle(e.target.value)}
                  placeholder="v√≠ d·ª•: G√≥c th·∫•p c·∫≠n c·∫£nh"
                  className="w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-white placeholder-gray-400"
                />
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">
                ƒêi·ªÅu ki·ªán b·ªï sung
              </label>
              <textarea
                value={additionalConditions}
                onChange={(e) => setAdditionalConditions(e.target.value)}
                placeholder="v√≠ d·ª•: Kh√¥ng c√≥ ti√™u ƒë·ªÅ hi·ªÉn th·ªã, th√™m m∆∞a..."
                className="w-full px-4 py-3 bg-gray-800 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none text-white placeholder-gray-400"
                rows={3}
              />
            </div>
          </div>

          <button
            onClick={generatePrompt}
            disabled={isGenerating}
            className="w-full bg-blue-600 text-white py-4 px-6 rounded-lg font-semibold hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-3 transition-all transform hover:scale-[1.02]"
          >
            {isGenerating ? (
              <>
                <Loader2 className="animate-spin" size={20} />
                ƒêang t·∫°o video...
              </>
            ) : (
              <>
                <Sparkles size={20} />
                üé¨ T·∫°o Video VEO3 Th·∫≠t
              </>
            )}
          </button>
        </div>

        {/* Output Section */}
        <div className="sticky top-24">
          <div className="bg-gray-800 border border-gray-600 rounded-lg p-6 h-full min-h-[600px]">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-white flex items-center gap-2">
                üìÑ K·∫øt Qu·∫£ VEO3
              </h3>
              <button
                onClick={copyPrompt}
                disabled={!generatedPrompt}
                className="flex items-center gap-2 px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg hover:bg-gray-600 disabled:opacity-50 disabled:cursor-not-allowed transition-all text-white"
              >
                {showCopied ? <Check size={16} /> : <Copy size={16} />}
                {showCopied ? 'ƒê√£ sao ch√©p!' : 'Sao ch√©p'}
              </button>
            </div>
            
            <div className="bg-gray-900 border border-gray-700 rounded-lg p-4 h-[520px] overflow-y-auto">
              {isGenerating ? (
                <div className="flex flex-col items-center justify-center h-full text-gray-400">
                  <Loader2 className="animate-spin h-12 w-12 mb-4 text-blue-500" />
                  <p className="text-center">
                    ƒêang g·ªçi API VEO3...<br/>
                    <span className="text-sm text-gray-500">Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t 30-60 gi√¢y</span>
                  </p>
                </div>
              ) : generatedPrompt ? (
                <div className="text-sm text-gray-200 leading-relaxed whitespace-pre-wrap">
                  {generatedPrompt}
                </div>
              ) : (
                <div className="flex items-center justify-center h-full text-gray-500">
                  <p>K·∫øt qu·∫£ t·∫°o video s·∫Ω xu·∫•t hi·ªán ·ªü ƒë√¢y...</p>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  )
} 