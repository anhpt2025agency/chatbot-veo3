'use client'

import { useState, useRef, useEffect } from 'react'
import { Send, Bot, User, Copy, Check, Trash2, RefreshCw, Sparkles, Edit3, Plus, Save, X } from 'lucide-react'

interface Message {
  id: string
  type: 'user' | 'bot'
  content: string
  timestamp: Date
}

interface ContentStyle {
  id: string
  name: string
  description: string
  systemPrompt: string
  icon: string
}

interface AIProvider {
  id: string
  name: string
  icon: string
  placeholder: string
}

interface ScriptWriterChatbotProps {
  onScriptGenerated?: (script: string) => void
}

export default function ScriptWriterChatbot({ onScriptGenerated }: ScriptWriterChatbotProps) {
  const [isMounted, setIsMounted] = useState(false)
  const [selectedStyle, setSelectedStyle] = useState<string>('general')
  const [showStyleEditor, setShowStyleEditor] = useState(false)
  const [editingStyle, setEditingStyle] = useState<ContentStyle | null>(null)
  const [customStyles, setCustomStyles] = useState<ContentStyle[]>([])
  const [showDeleteConfirm, setShowDeleteConfirm] = useState<string | null>(null)
  const [showApiKeyEditor, setShowApiKeyEditor] = useState(false)
  const [selectedAIProvider, setSelectedAIProvider] = useState<string>('openai')
  const [apiKeys, setApiKeys] = useState<Record<string, string>>({
    openai: '',
    gemini: '',
    claude: ''
  })
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      type: 'bot',
      content: `ü§ñ **Xin ch√†o! T√¥i l√† AI Script Writer chuy√™n nghi·ªáp.**

‚ö†Ô∏è **L∆ØU √ù QUAN TR·ªåNG:** D·ª± √°n n√†y ch·ªâ s·ª≠ d·ª•ng **AI APIs th·∫≠t**, kh√¥ng c√≥ template fallback.

**üîë Y√äU C·∫¶U B·∫ÆT BU·ªòC:** 
B·∫°n c·∫ßn c√≥ √≠t nh·∫•t m·ªôt API key t·ª´:
- **OpenAI** (GPT-4): K·ªãch b·∫£n chuy√™n nghi·ªáp
- **Google Gemini**: K·ªãch b·∫£n s√°ng t·∫°o  
- **Anthropic Claude**: K·ªãch b·∫£n chi ti·∫øt

**‚öôÔ∏è C√°ch c·∫•u h√¨nh:** Nh·∫•p v√†o ‚ö° ·ªü g√≥c tr√™n b√™n ph·∫£i

**üìù T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:**
- Vi·∫øt k·ªãch b·∫£n ho√†n ch·ªânh cho video ng·∫Øn
- T·∫°o nh√¢n v·∫≠t v·ªõi t√≠nh c√°ch r√µ r√†ng
- M√¥ t·∫£ c·∫£nh quay chi ti·∫øt
- Vi·∫øt l·ªùi tho·∫°i t·ª± nhi√™n v√† h·∫•p d·∫´n
- G·ª£i √Ω √¢m thanh ph√π h·ª£p

**üí° V√≠ d·ª•:** "T√¥i mu·ªën m·ªôt video 30 gi√¢y v·ªÅ m·ªôt c√¥ g√°i u·ªëng c√† ph√™ bu·ªïi s√°ng"`,
      timestamp: new Date()
    }
  ])
  const [inputMessage, setInputMessage] = useState('')
  const [isTyping, setIsTyping] = useState(false)
  const [aiProgress, setAiProgress] = useState<{[key: string]: 'waiting' | 'processing' | 'completed' | 'error'}>({})
  const [showAiProgress, setShowAiProgress] = useState(false)
  const [currentScript, setCurrentScript] = useState<string>('')
  const [scriptVersion, setScriptVersion] = useState<number>(0)
  const [isRefining, setIsRefining] = useState(false)
  const [scriptHistory, setScriptHistory] = useState<{version: number, content: string, timestamp: Date}[]>([])
  const [showHistory, setShowHistory] = useState(false)
  const [showNewScriptNotice, setShowNewScriptNotice] = useState(false)
  const [showDeletedStyles, setShowDeletedStyles] = useState(false)
  const [showCopied, setShowCopied] = useState('')
  const [autoScroll, setAutoScroll] = useState(true)
  const [userScrolled, setUserScrolled] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)

  // ƒê·ªãnh nghƒ©a c√°c AI providers
  const aiProviders: AIProvider[] = [
    {
      id: 'openai',
      name: 'OpenAI GPT',
      icon: 'ü§ñ',
      placeholder: 'sk-proj-...'
    },
    {
      id: 'gemini',
      name: 'Google Gemini',
      icon: '‚ú®',
      placeholder: 'AIza...'
    },
    {
      id: 'claude',
      name: 'Anthropic Claude',
      icon: 'üß†',
      placeholder: 'sk-ant-...'
    }
  ]

  // ƒê·ªãnh nghƒ©a c√°c phong c√°ch content
  const contentStyles: ContentStyle[] = [
    {
      id: 'general',
      name: 'T·ªïng qu√°t',
      description: 'Phong c√°ch trung t√≠nh, ph√π h·ª£p m·ªçi n·ªôi dung',
      icon: 'üìù',
      systemPrompt: 'B·∫°n l√† m·ªôt chuy√™n gia vi·∫øt k·ªãch b·∫£n video chuy√™n nghi·ªáp. H√£y vi·∫øt k·ªãch b·∫£n chi ti·∫øt, d·ªÖ hi·ªÉu v√† h·∫•p d·∫´n.'
    },
    {
      id: 'doctor',
      name: 'B√°c sƒ©',
      description: 'Phong c√°ch chuy√™n m√¥n y khoa, tin c·∫≠y',
      icon: 'üë©‚Äç‚öïÔ∏è',
      systemPrompt: 'B·∫°n l√† m·ªôt b√°c sƒ© chuy√™n khoa v·ªõi kinh nghi·ªám l√¢u nƒÉm. Vi·∫øt k·ªãch b·∫£n v·ªõi gi·ªçng ƒëi·ªáu chuy√™n nghi·ªáp, ƒë√°ng tin c·∫≠y, s·ª≠ d·ª•ng thu·∫≠t ng·ªØ y khoa ph√π h·ª£p nh∆∞ng v·∫´n d·ªÖ hi·ªÉu cho ng∆∞·ªùi d√¢n. Lu√¥n nh·∫•n m·∫°nh t√≠nh khoa h·ªçc v√† an to√†n.'
    },
    {
      id: 'review',
      name: 'Review',
      description: 'ƒê√°nh gi√° s·∫£n ph·∫©m, d·ªãch v·ª• chi ti·∫øt',
      icon: '‚≠ê',
      systemPrompt: 'B·∫°n l√† m·ªôt reviewer chuy√™n nghi·ªáp v·ªõi kinh nghi·ªám ƒë√°nh gi√° s·∫£n ph·∫©m. Vi·∫øt k·ªãch b·∫£n review chi ti·∫øt, kh√°ch quan, bao g·ªìm ∆∞u nh∆∞·ª£c ƒëi·ªÉm, so s√°nh v·ªõi c√°c s·∫£n ph·∫©m kh√°c, v√† ƒë∆∞a ra khuy·∫øn ngh·ªã r√µ r√†ng. S·ª≠ d·ª•ng ng√¥n ng·ªØ th√¢n thi·ªán nh∆∞ng chuy√™n m√¥n.'
    },
    {
      id: 'comedy',
      name: 'H√†i h∆∞·ªõc',
      description: 'N·ªôi dung gi·∫£i tr√≠, vui nh·ªôn',
      icon: 'üòÇ',
      systemPrompt: 'B·∫°n l√† m·ªôt comedian chuy√™n nghi·ªáp. Vi·∫øt k·ªãch b·∫£n h√†i h∆∞·ªõc, s·ª≠ d·ª•ng c√°c t√¨nh hu·ªëng b·∫•t ng·ªù, wordplay, v√† y·∫øu t·ªë h√†i ph√π h·ª£p v·ªõi vƒÉn h√≥a Vi·ªát Nam. ƒê·∫£m b·∫£o n·ªôi dung t√≠ch c·ª±c v√† kh√¥ng g√¢y kh√≥ ch·ªãu.'
    },
    {
      id: 'interview',
      name: 'Ph·ªèng v·∫•n',
      description: 'Phong c√°ch trao ƒë·ªïi, h·ªèi ƒë√°p',
      icon: 'üé§',
      systemPrompt: 'B·∫°n l√† m·ªôt nh√† b√°o/MC chuy√™n nghi·ªáp. Vi·∫øt k·ªãch b·∫£n ph·ªèng v·∫•n v·ªõi c√°c c√¢u h·ªèi s√¢u s·∫Øc, logic, t·∫°o kh√¥ng kh√≠ tho·∫£i m√°i cho ƒë·ªëi t∆∞·ª£ng ƒë∆∞·ª£c ph·ªèng v·∫•n. Bao g·ªìm c√¢u h·ªèi m·ªü ƒë·∫ßu, c√¢u h·ªèi ch√≠nh v√† c√¢u h·ªèi k·∫øt th√∫c.'
    },
    {
      id: 'educational',
      name: 'Gi√°o d·ª•c',
      description: 'N·ªôi dung h·ªçc t·∫≠p, gi·∫£ng d·∫°y',
      icon: 'üìö',
      systemPrompt: 'B·∫°n l√† m·ªôt gi√°o vi√™n kinh nghi·ªám. Vi·∫øt k·ªãch b·∫£n gi√°o d·ª•c v·ªõi c·∫•u tr√∫c r√µ r√†ng: m·ªü ƒë·∫ßu thu h√∫t, ph·∫ßn ch√≠nh d·ªÖ hi·ªÉu v·ªõi v√≠ d·ª• c·ª• th·ªÉ, v√† ph·∫ßn t·ªïng k·∫øt. S·ª≠ d·ª•ng ng√¥n ng·ªØ ƒë∆°n gi·∫£n, h√¨nhË±°ho√° v√† t∆∞∆°ng t√°c.'
    },
    {
      id: 'lifestyle',
      name: 'Lifestyle',
      description: 'Phong c√°ch s·ªëng, th·ªùi trang, l√†m ƒë·∫πp',
      icon: '‚ú®',
      systemPrompt: 'B·∫°n l√† m·ªôt lifestyle blogger c√≥ ·∫£nh h∆∞·ªüng. Vi·∫øt k·ªãch b·∫£n v·ªÅ phong c√°ch s·ªëng v·ªõi gi·ªçng ƒëi·ªáu th√¢n thi·ªán, truy·ªÅn c·∫£m h·ª©ng. Chia s·∫ª kinh nghi·ªám c√° nh√¢n, tips h·ªØu √≠ch v√† t·∫°o c·∫£m gi√°c g·∫ßn g≈©i v·ªõi ng∆∞·ªùi xem.'
    },
    {
      id: 'business',
      name: 'Kinh doanh',
      description: 'N·ªôi dung v·ªÅ kh·ªüi nghi·ªáp, qu·∫£n l√Ω',
      icon: 'üíº',
      systemPrompt: 'B·∫°n l√† m·ªôt chuy√™n gia kinh doanh v·ªõi nhi·ªÅu nƒÉm kinh nghi·ªám. Vi·∫øt k·ªãch b·∫£n v·ªÅ ch·ªß ƒë·ªÅ kinh doanh v·ªõi insights s√¢u s·∫Øc, case studies th·ª±c t·∫ø, v√† l·ªùi khuy√™n h√†nh ƒë·ªông c·ª• th·ªÉ. S·ª≠ d·ª•ng ng√¥n ng·ªØ chuy√™n nghi·ªáp nh∆∞ng d·ªÖ ti·∫øp c·∫≠n.'
    }
  ]

  const scrollToBottom = () => {
    if (autoScroll && !userScrolled) {
      messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
    }
  }

  // Ch·ªâ scroll khi c√≥ tin nh·∫Øn m·ªõi t·ª´ user ho·∫∑c khi bot b·∫Øt ƒë·∫ßu typing
  useEffect(() => {
    const lastMessage = messages[messages.length - 1]
    if (lastMessage && (lastMessage.type === 'user' || isTyping)) {
      scrollToBottom()
    }
  }, [messages, isTyping, autoScroll, userScrolled, scrollToBottom])

  // Detect user manual scroll
  const handleScroll = (e: React.UIEvent<HTMLDivElement>) => {
    const { scrollTop, scrollHeight, clientHeight } = e.currentTarget
    const isAtBottom = scrollHeight - scrollTop === clientHeight
    setUserScrolled(!isAtBottom)
  }

  // Reset userScrolled when new message from user
  const resetScrollState = () => {
    setUserScrolled(false)
  }

  // Set mounted state to prevent hydration mismatch
  useEffect(() => {
    setIsMounted(true)
  }, [])

  // Load custom styles from localStorage
  useEffect(() => {
    if (typeof window === 'undefined') return
    
    try {
      const saved = localStorage.getItem('customContentStyles')
      if (saved) {
        setCustomStyles(JSON.parse(saved))
      }
    } catch (error) {
      console.error('Failed to load custom styles:', error)
    }

    // Load API keys from localStorage
    try {
      const savedApiKeys = localStorage.getItem('aiApiKeys')
      if (savedApiKeys) {
        setApiKeys(JSON.parse(savedApiKeys))
      }
    } catch (error) {
      console.error('Failed to load API keys:', error)
    }
  }, [])

  // Save custom styles to localStorage
  const saveCustomStyles = (styles: ContentStyle[]) => {
    if (process.env.NODE_ENV === 'development') {
      console.log('Saving custom styles:', styles)
    }
    setCustomStyles(styles)
    if (typeof window !== 'undefined') {
      try {
        localStorage.setItem('customContentStyles', JSON.stringify(styles))
        if (process.env.NODE_ENV === 'development') {
          console.log('Saved to localStorage')
        }
      } catch (error) {
        console.error('Failed to save custom styles:', error)
      }
    }
  }

  const saveApiKeys = (keys: Record<string, string>) => {
    setApiKeys(keys)
    if (typeof window !== 'undefined') {
      try {
        localStorage.setItem('aiApiKeys', JSON.stringify(keys))
      } catch (error) {
        console.error('Failed to save API keys:', error)
      }
    }
  }

  const getVisibleStyles = () => {
    if (typeof window === 'undefined') return contentStyles.concat(customStyles)
    
    try {
      const hiddenStyles = JSON.parse(localStorage.getItem('hiddenBuiltInStyles') || '[]')
      return contentStyles.filter(style => !hiddenStyles.includes(style.id)).concat(customStyles)
    } catch (error) {
      console.error('Failed to load hidden styles:', error)
      return contentStyles.concat(customStyles)
    }
  }

  const getHiddenStyles = () => {
    if (typeof window === 'undefined') return []
    
    try {
      const hiddenStyleIds = JSON.parse(localStorage.getItem('hiddenBuiltInStyles') || '[]')
      return contentStyles.filter(style => hiddenStyleIds.includes(style.id))
    } catch (error) {
      console.error('Failed to load hidden styles:', error)
      return []
    }
  }

  const generateScriptResponse = async (userMessage: string): Promise<string> => {
    // Ki·ªÉm tra xem c√≥ ph·∫£i ƒëang ch·ªânh s·ª≠a k·ªãch b·∫£n kh√¥ng
    const isRefinementRequest = currentScript && (
      userMessage.toLowerCase().includes('s·ª≠a') ||
      userMessage.toLowerCase().includes('thay ƒë·ªïi') ||
      userMessage.toLowerCase().includes('ch·ªânh') ||
      userMessage.toLowerCase().includes('c·∫£i thi·ªán') ||
      userMessage.toLowerCase().includes('b·ªï sung') ||
      userMessage.toLowerCase().includes('x√≥a') ||
      userMessage.toLowerCase().includes('kh√¥ng h·ª£p l√Ω') ||
      userMessage.toLowerCase().includes('ch∆∞a ·ªïn') ||
      userMessage.toLowerCase().includes('th√™m') ||
      userMessage.toLowerCase().includes('b·ªõt')
    )

    if (isRefinementRequest) {
      return await refineScript(userMessage)
    }

    // L·∫•y system prompt theo phong c√°ch ƒë√£ ch·ªçn
    const currentStyle = getVisibleStyles().find(style => style.id === selectedStyle)
    const systemPrompt = currentStyle?.systemPrompt || contentStyles[0].systemPrompt
    
    // T·∫°o prompt ƒë·∫ßy ƒë·ªß v·ªõi h∆∞·ªõng d·∫´n c·ª• th·ªÉ v√† v√≠ d·ª•
    const prompt = `${systemPrompt}

**NHI·ªÜM V·ª§ CH√çNH:** Vi·∫øt k·ªãch b·∫£n video ho√†n ch·ªânh cho y√™u c·∫ßu sau:
"${userMessage}"

**Y√äU C·∫¶U B·∫ÆT BU·ªòC:**
1. **Ph√¢n t√≠ch y√™u c·∫ßu tr∆∞·ªõc**: Hi·ªÉu r√µ ng∆∞·ªùi d√πng mu·ªën g√¨
2. **Tu√¢n th·ªß nguy√™n t·∫Øc**: K·ªãch b·∫£n ph·∫£i kh·ªõp 100% v·ªõi y√™u c·∫ßu
3. **Kh√¥ng t·ª± √Ω th√™m**: Ch·ªâ vi·∫øt theo ƒë√∫ng y√™u c·∫ßu, kh√¥ng t·ª± s√°ng t·∫°o th√™m √Ω t∆∞·ªüng kh√°c

**C·∫§U TR√öC K·ªäCH B·∫¢N:**

üé¨ **TH√îNG TIN CHUNG**
- Ti√™u ƒë·ªÅ: [T√™n video d·ª±a tr√™n y√™u c·∫ßu]
- Th·ªùi l∆∞·ª£ng: [∆Ø·ªõc t√≠nh th·ªùi gian]
- Phong c√°ch: ${currentStyle?.name}

üë§ **NH√ÇN V·∫¨T CH√çNH**
- T√™n: [T√™n ph√π h·ª£p]
- Tu·ªïi: [ƒê·ªô tu·ªïi h·ª£p l√Ω]
- Ngo·∫°i h√¨nh: [M√¥ t·∫£ ng·∫Øn g·ªçn]
- T√≠nh c√°ch: [ƒê·∫∑c ƒëi·ªÉm t√≠nh c√°ch]

üé≠ **K·ªäCH B·∫¢N CHI TI·∫æT**

**[Th·ªùi ƒëi·ªÉm: 00:00-00:05]**
üìπ G√≥c quay: [M√¥ t·∫£ g√≥c m√°y]
üé¨ H√†nh ƒë·ªông: [M√¥ t·∫£ chi ti·∫øt nh·ªØng g√¨ x·∫£y ra]
üí¨ L·ªùi tho·∫°i: "[L·ªùi n√≥i c·ª• th·ªÉ n·∫øu c√≥]"
üéµ √Çm thanh: [√Çm thanh n·ªÅn/hi·ªáu ·ª©ng]

**[Th·ªùi ƒëi·ªÉm: 00:05-00:15]**
üìπ G√≥c quay: [M√¥ t·∫£ g√≥c m√°y]
üé¨ H√†nh ƒë·ªông: [M√¥ t·∫£ chi ti·∫øt nh·ªØng g√¨ x·∫£y ra]
üí¨ L·ªùi tho·∫°i: "[L·ªùi n√≥i c·ª• th·ªÉ n·∫øu c√≥]"
üéµ √Çm thanh: [√Çm thanh n·ªÅn/hi·ªáu ·ª©ng]

[Ti·∫øp t·ª•c cho ƒë·∫øn khi h·∫øt video...]

üé® **K·ª∏ THU·∫¨T QUAY**
- √Ånh s√°ng: [G·ª£i √Ω √°nh s√°ng]
- M√†u s·∫Øc: [T√¥ng m√†u ch·ªß ƒë·∫°o]
- Chuy·ªÉn c·∫£nh: [Hi·ªáu ·ª©ng chuy·ªÉn c·∫£nh]

**L∆ØU √ù QUAN TR·ªåNG:**
- Vi·∫øt b·∫±ng ti·∫øng Vi·ªát
- ƒê·∫£m b·∫£o k·ªãch b·∫£n kh·ªõp ch√≠nh x√°c v·ªõi y√™u c·∫ßu "${userMessage}"
- N·∫øu y√™u c·∫ßu kh√¥ng r√µ r√†ng, h·ªèi l·∫°i thay v√¨ t·ª± ƒëo√°n
- T·∫≠p trung v√†o y√™u c·∫ßu ch√≠nh, kh√¥ng th√™m b·ªõt n·ªôi dung`

    // T√¨m t·∫•t c·∫£ AI providers c√≥ API key
    const availableProviders = aiProviders.filter(provider => apiKeys[provider.id]?.trim())
    
    if (availableProviders.length > 0) {
      try {
        // Hi·ªÉn th·ªã progress cho multiple AI
        setShowAiProgress(true)
        const initialProgress: any = {}
        availableProviders.forEach(provider => {
          initialProgress[provider.id] = 'waiting'
        })
        setAiProgress(initialProgress)

        // G·ªçi t·∫•t c·∫£ AI APIs song song
        const apiPromises = availableProviders.map(async (provider) => {
          setAiProgress(prev => ({...prev, [provider.id]: 'processing'}))
          
          try {
            const response = await fetch('/api/script-writer', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                prompt,
                userMessage,
                apiKey: apiKeys[provider.id],
                provider: provider.id
              }),
            })

            if (response.ok) {
              const data = await response.json()
              setAiProgress(prev => ({...prev, [provider.id]: 'completed'}))
              
              // Th√™m quality feedback v√†o response n·∫øu c√≥
              let qualityNote = ''
              if (data.quality && !data.quality.isValid) {
                qualityNote = `\n\n‚ö†Ô∏è **L∆ØU √ù CH·∫§T L∆Ø·ª¢NG:**\n${data.quality.issues.join('\n')}\n\nüí° **G·ª¢I √ù C·∫¢I THI·ªÜN:**\n${data.quality.suggestions.join('\n')}`
              }
              
              if (data.improved) {
                qualityNote += '\n\n‚ú® **K·ªãch b·∫£n ƒë√£ ƒë∆∞·ª£c t·ª± ƒë·ªông c·∫£i thi·ªán ƒë·ªÉ ph√π h·ª£p h∆°n v·ªõi y√™u c·∫ßu**'
              }
              
              return {
                provider: provider.id,
                providerName: provider.name,
                script: String(data.script || data.content || '') + qualityNote,
                success: true
              }
            } else {
              setAiProgress(prev => ({...prev, [provider.id]: 'error'}))
              return {
                provider: provider.id,
                providerName: provider.name,
                script: null,
                success: false
              }
            }
          } catch (error) {
            console.error(`${provider.name} API error:`, error)
            setAiProgress(prev => ({...prev, [provider.id]: 'error'}))
            return {
              provider: provider.id,
              providerName: provider.name,
              script: null,
              success: false
            }
          }
        })

        // ƒê·ª£i t·∫•t c·∫£ APIs ho√†n th√†nh
        const results = await Promise.all(apiPromises)
        const successfulResults = results.filter(result => result.success && result.script)

        if (successfulResults.length > 0) {
          let finalScript = ''
          // N·∫øu c√≥ nhi·ªÅu k·∫øt qu·∫£, t·ªïng h·ª£p ch√∫ng l·∫°i
          if (successfulResults.length > 1) {
            finalScript = await combineAIResults(successfulResults, userMessage, prompt)
          } else {
            // Ch·ªâ c√≥ 1 k·∫øt qu·∫£
            finalScript = successfulResults[0].script || ''
          }
          
          // L∆∞u k·ªãch b·∫£n hi·ªán t·∫°i ƒë·ªÉ c√≥ th·ªÉ ch·ªânh s·ª≠a sau
          const newVersion = scriptVersion + 1
          setCurrentScript(finalScript)
          setScriptVersion(newVersion)
          setScriptHistory(prev => [...prev, {
            version: newVersion,
            content: finalScript,
            timestamp: new Date()
          }])
          setShowAiProgress(false)
          
          // Hi·ªÉn th·ªã th√¥ng b√°o k·ªãch b·∫£n m·ªõi
          setShowNewScriptNotice(true)
          setTimeout(() => setShowNewScriptNotice(false), 5000)
          
          return finalScript
        }
      } catch (error) {
        console.error('Multi-AI error:', error)
        setShowAiProgress(false)
      }
    }

    // Kh√¥ng c√≥ API key n√†o ho·∫°t ƒë·ªông - tr·∫£ v·ªÅ th√¥ng b√°o l·ªói
    setShowAiProgress(false)
    
    return `‚ö†Ô∏è **C·∫¶N API KEY ƒê·ªÇ S·ª¨ D·ª§NG AI SCRIPT WRITER**

**H∆∞·ªõng d·∫´n c·∫•u h√¨nh:**
1. Nh·∫•p v√†o bi·ªÉu t∆∞·ª£ng ‚ö° ·ªü g√≥c tr√™n b√™n ph·∫£i
2. Nh·∫≠p √≠t nh·∫•t m·ªôt API key cho:
   - **OpenAI** (GPT-4): Cho k·ªãch b·∫£n chuy√™n nghi·ªáp
   - **Google Gemini**: Cho k·ªãch b·∫£n s√°ng t·∫°o
   - **Anthropic Claude**: Cho k·ªãch b·∫£n chi ti·∫øt
3. Kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng
4. Th·ª≠ l·∫°i y√™u c·∫ßu c·ªßa b·∫°n

**L∆∞u √Ω:** D·ª± √°n n√†y ch·ªâ s·ª≠ d·ª•ng AI APIs th·∫≠t, kh√¥ng c√≥ template fallback.

**Y√™u c·∫ßu c·ªßa b·∫°n:** "${userMessage}"`
  }

  // H√†m ch·ªânh s·ª≠a k·ªãch b·∫£n d·ª±a tr√™n feedback c·ªßa user
  const refineScript = async (userFeedback: string): Promise<string> => {
    setIsRefining(true)
    
    // T·∫°o prompt cho vi·ªác ch·ªânh s·ª≠a k·ªãch b·∫£n
    const refinementPrompt = `B·∫°n l√† m·ªôt chuy√™n gia bi√™n t·∫≠p k·ªãch b·∫£n chuy√™n nghi·ªáp. Ng∆∞·ªùi d√πng ƒë√£ y√™u c·∫ßu ch·ªânh s·ª≠a k·ªãch b·∫£n sau ƒë√¢y:

**K·ªäCH B·∫¢N HI·ªÜN T·∫†I (Phi√™n b·∫£n ${scriptVersion}):**
${currentScript}

**Y√äU C·∫¶U CH·ªàNH S·ª¨A C·ª¶A NG∆Ø·ªúI D√ôNG:**
"${userFeedback}"

H√£y ph√¢n t√≠ch y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng v√† ch·ªânh s·ª≠a k·ªãch b·∫£n m·ªôt c√°ch ch√≠nh x√°c:

1. **Ghi nh·∫≠n v·∫•n ƒë·ªÅ**: X√°c ƒë·ªãnh ch√≠nh x√°c ph·∫ßn n√†o ng∆∞·ªùi d√πng mu·ªën thay ƒë·ªïi
2. **Th·ª±c hi·ªán ch·ªânh s·ª≠a**: Ch·ªâ s·ª≠a nh·ªØng ph·∫ßn ƒë∆∞·ª£c y√™u c·∫ßu, gi·ªØ nguy√™n nh·ªØng ph·∫ßn t·ªët
3. **ƒê·∫£m b·∫£o t√≠nh li·ªÅn m·∫°ch**: K·ªãch b·∫£n sau khi s·ª≠a ph·∫£i ho√†n ch·ªânh v√† m·∫°ch l·∫°c
4. **Gi·∫£i th√≠ch thay ƒë·ªïi**: M√¥ t·∫£ ng·∫Øn g·ªçn nh·ªØng g√¨ ƒë√£ ƒë∆∞·ª£c ch·ªânh s·ª≠a

Tr·∫£ v·ªÅ k·ªãch b·∫£n ƒë√£ ch·ªânh s·ª≠a theo ƒë·ªãnh d·∫°ng:

**üìù THAY ƒê·ªîI TH·ª∞C HI·ªÜN:**
[M√¥ t·∫£ ng·∫Øn g·ªçn nh·ªØng g√¨ ƒë√£ s·ª≠a]

**üé¨ K·ªäCH B·∫¢N ƒê√É CH·ªàNH S·ª¨A (Phi√™n b·∫£n ${scriptVersion + 1}):**
[K·ªãch b·∫£n ho√†n ch·ªânh sau khi ch·ªânh s·ª≠a]

Vi·∫øt b·∫±ng ti·∫øng Vi·ªát.`

    // T√¨m AI provider t·ªët nh·∫•t ƒë·ªÉ ch·ªânh s·ª≠a
    const availableProviders = aiProviders.filter(provider => apiKeys[provider.id]?.trim())
    const bestProvider = ['openai', 'claude', 'gemini'].find(id => 
      availableProviders.some(p => p.id === id)
    )
    
    if (bestProvider && apiKeys[bestProvider]) {
      try {
        const response = await fetch('/api/script-writer', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            prompt: refinementPrompt,
            userMessage: userFeedback,
            apiKey: apiKeys[bestProvider],
            provider: bestProvider,
            isRefining: true
          }),
        })

        if (response.ok) {
          const data = await response.json()
          const refinedScript = data.script || data.content
          
          // C·∫≠p nh·∫≠t k·ªãch b·∫£n hi·ªán t·∫°i
          const newVersion = scriptVersion + 1
          setCurrentScript(refinedScript)
          setScriptVersion(newVersion)
          setScriptHistory(prev => [...prev, {
            version: newVersion,
            content: refinedScript,
            timestamp: new Date()
          }])
          setIsRefining(false)
          
          return refinedScript
        }
      } catch (error) {
        console.error('Script refinement error:', error)
      }
    }

    setIsRefining(false)
    return `‚ùå **Kh√¥ng th·ªÉ ch·ªânh s·ª≠a k·ªãch b·∫£n**

Xin l·ªói, t√¥i kh√¥ng th·ªÉ th·ª±c hi·ªán ch·ªânh s·ª≠a l√∫c n√†y. C√≥ th·ªÉ do:
- Ch∆∞a c·∫•u h√¨nh AI API
- L·ªói k·∫øt n·ªëi
- API key kh√¥ng h·ª£p l·ªá

**K·ªãch b·∫£n hi·ªán t·∫°i c·ªßa b·∫°n:**
${currentScript}

Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c ki·ªÉm tra c·∫•u h√¨nh API.`
  }

  // H√†m t·ªïng h·ª£p k·∫øt qu·∫£ t·ª´ nhi·ªÅu AI
  const combineAIResults = async (results: any[], userMessage: string, originalPrompt: string): Promise<string> => {
    // T·∫°o prompt cho vi·ªác t·ªïng h·ª£p
    const combinePrompt = `B·∫°n l√† m·ªôt chuy√™n gia bi√™n t·∫≠p k·ªãch b·∫£n chuy√™n nghi·ªáp. H√£y t·ªïng h·ª£p v√† t·∫°o ra k·ªãch b·∫£n t·ªët nh·∫•t t·ª´ ${results.length} k·ªãch b·∫£n sau ƒë√¢y:

${results.map((result, index) => `
**K·ªäCH B·∫¢N ${index + 1} (t·ª´ ${result.providerName}):**
${result.script}

---`).join('\n')}

H√£y t·∫°o ra m·ªôt k·ªãch b·∫£n cu·ªëi c√πng b·∫±ng c√°ch:
1. L·∫•y nh·ªØng √Ω t∆∞·ªüng hay nh·∫•t t·ª´ m·ªói k·ªãch b·∫£n
2. K·∫øt h·ª£p th√†nh m·ªôt k·ªãch b·∫£n ho√†n ch·ªânh v√† m·∫°ch l·∫°c
3. ƒê·∫£m b·∫£o ch·∫•t l∆∞·ª£ng cao nh·∫•t v·ªÅ n·ªôi dung, c·∫•u tr√∫c v√† chi ti·∫øt
4. Gi·ªØ nguy√™n y√™u c·∫ßu g·ªëc: "${userMessage}"

K·∫øt qu·∫£ ph·∫£i l√† k·ªãch b·∫£n ho√†n ch·ªânh, kh√¥ng ƒë·ªÅ c·∫≠p ƒë·∫øn vi·ªác t·ªïng h·ª£p.`

    // T√¨m AI provider t·ªët nh·∫•t ƒë·ªÉ t·ªïng h·ª£p (∆∞u ti√™n OpenAI ho·∫∑c Claude)
    const bestProvider = ['openai', 'claude', 'gemini'].find(id => apiKeys[id]?.trim())
    
    if (bestProvider) {
      try {
        const response = await fetch('/api/script-writer', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            prompt: combinePrompt,
            userMessage: 'T·ªïng h·ª£p k·ªãch b·∫£n',
            apiKey: apiKeys[bestProvider],
            provider: bestProvider,
            style: selectedStyle,
            isCombining: true
          }),
        })

        if (response.ok) {
          const data = await response.json()
          return `üé¨ **K·ªäCH B·∫¢N T·ªîNG H·ª¢P T·ª™ ${results.length} AI**\n\n${data.script}\n\n---\nüí° *K·ªãch b·∫£n n√†y ƒë∆∞·ª£c t·∫°o b·ªüi s·ª± k·∫øt h·ª£p c·ªßa ${results.map(r => r.providerName).join(', ')} v√† t·ªïng h·ª£p b·ªüi ${aiProviders.find(p => p.id === bestProvider)?.name}*`
        }
      } catch (error) {
        console.error('Combine error:', error)
      }
    }

    // Fallback: Gh√©p ƒë∆°n gi·∫£n
    return `üé¨ **K·ªäCH B·∫¢N T·ª™ MULTIPLE AI**

${results.map((result, index) => `
**üìù T·ª´ ${result.providerName}:**
${result.script}

---`).join('\n')}

üí° *B·∫°n c√≥ th·ªÉ ch·ªçn ph·∫ßn n√†o hay nh·∫•t t·ª´ c√°c k·ªãch b·∫£n tr√™n ƒë·ªÉ s·ª≠ d·ª•ng*`
  }

  // Lo·∫°i b·ªè template fallback - ch·ªâ s·ª≠ d·ª•ng AI APIs th·∫≠t

  const handleSendMessage = async () => {
    if (!inputMessage.trim()) return

    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: inputMessage,
      timestamp: new Date()
    }

    setMessages(prev => [...prev, userMessage])
    setInputMessage('')
    setIsTyping(true)
    resetScrollState() // Reset scroll state khi user g·ª≠i tin nh·∫Øn

    // G·ªçi AI ƒë·ªÉ generate response
    try {
      const response = await generateScriptResponse(inputMessage)
      
      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'bot',
        content: response,
        timestamp: new Date()
      }

      setMessages(prev => [...prev, botMessage])
      onScriptGenerated?.(response)
    } catch (error) {
      console.error('Error generating script:', error)
      
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'bot',
        content: '‚ùå C√≥ l·ªói x·∫£y ra khi t·∫°o k·ªãch b·∫£n. Vui l√≤ng th·ª≠ l·∫°i.',
        timestamp: new Date()
      }
      
      setMessages(prev => [...prev, errorMessage])
    }

    setIsTyping(false)
  }

  const copyMessage = (content: string, messageId: string) => {
    navigator.clipboard.writeText(content)
    setShowCopied(messageId)
    setTimeout(() => setShowCopied(''), 2000)
  }

  const clearChat = () => {
    setMessages([messages[0]]) // Gi·ªØ l·∫°i message ch√†o ƒë·∫ßu ti√™n
  }

  // Style management functions
  const openStyleEditor = (style?: ContentStyle) => {
    if (style) {
      setEditingStyle({ ...style })
    } else {
      // Create new style
      setEditingStyle({
        id: `custom_${Date.now()}`,
        name: '',
        description: '',
        systemPrompt: '',
        icon: 'üé≠'
      })
    }
    setShowStyleEditor(true)
  }

  const saveStyle = () => {
    if (!editingStyle || !editingStyle.name.trim()) return

    const isCustom = editingStyle.id.startsWith('custom_')
    if (isCustom) {
      const existingIndex = customStyles.findIndex(s => s.id === editingStyle.id)
      if (existingIndex >= 0) {
        // Update existing
        const updated = [...customStyles]
        updated[existingIndex] = editingStyle
        saveCustomStyles(updated)
      } else {
        // Add new
        saveCustomStyles([...customStyles, editingStyle])
      }
    }
    
    setShowStyleEditor(false)
    setEditingStyle(null)
  }

  const confirmDeleteStyle = (styleId: string) => {
    if (process.env.NODE_ENV === 'development') {
      console.log('Confirm delete style:', styleId)
    }
    setShowDeleteConfirm(styleId)
  }

  const deleteStyle = (styleId: string) => {
    if (process.env.NODE_ENV === 'development') {
      console.log('Delete style called:', styleId)
    }
    
    // Kh√¥ng cho x√≥a phong c√°ch "T·ªïng qu√°t" (lu√¥n gi·ªØ l√†m m·∫∑c ƒë·ªãnh)
    if (styleId === 'general') {
      if (process.env.NODE_ENV === 'development') {
        console.log('Cannot delete default "T·ªïng qu√°t" style')
      }
      setShowDeleteConfirm(null)
      return
    }
    
    if (styleId.startsWith('custom_')) {
      // X√≥a custom style
      const updated = customStyles.filter(s => s.id !== styleId)
      if (process.env.NODE_ENV === 'development') {
        console.log('Updated custom styles after delete:', updated)
      }
      saveCustomStyles(updated)
    } else {
      // X√≥a built-in style - th√™m v√†o danh s√°ch ·∫©n
      try {
        const hiddenStyles = JSON.parse((typeof window !== 'undefined' ? localStorage.getItem('hiddenBuiltInStyles') : null) || '[]')
        if (!hiddenStyles.includes(styleId)) {
          hiddenStyles.push(styleId)
          if (typeof window !== 'undefined') {
            localStorage.setItem('hiddenBuiltInStyles', JSON.stringify(hiddenStyles))
          }
          if (process.env.NODE_ENV === 'development') {
            console.log('Hidden built-in style:', styleId)
          }
          
          // Force re-render b·∫±ng c√°ch trigger state update
          setCustomStyles([...customStyles])
        }
      } catch (error) {
        console.error('Error hiding built-in style:', error)
      }
    }
    
    // If deleted style was selected, switch to general
    if (selectedStyle === styleId) {
      setSelectedStyle('general')
    }
    
    setShowDeleteConfirm(null)
  }

  // Kh√¥i ph·ª•c m·ªôt phong c√°ch c·ª• th·ªÉ
  const restoreStyle = (styleId: string) => {
    if (typeof window !== 'undefined') {
      try {
        const hiddenStyles = JSON.parse(localStorage.getItem('hiddenBuiltInStyles') || '[]')
        const updatedHidden = hiddenStyles.filter((id: string) => id !== styleId)
        localStorage.setItem('hiddenBuiltInStyles', JSON.stringify(updatedHidden))
        setCustomStyles([...customStyles]) // Force re-render
      } catch (error) {
        console.error('Error restoring style:', error)
      }
    }
  }

  return (
    <div className="bg-gray-800 border border-gray-600 rounded-lg p-6 mb-8">
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center gap-3">
          <div className="p-2 bg-purple-600 rounded-lg">
            <Bot size={24} className="text-white" />
          </div>
          <div>
            <h3 className="text-lg font-semibold text-white">AI Script Writer</h3>
            <p className="text-sm text-gray-400">Chatbot chuy√™n vi·∫øt k·ªãch b·∫£n video</p>
          </div>
        </div>
        
        <div className="flex gap-2">
          <button
            onClick={() => setAutoScroll(!autoScroll)}
            className={`p-2 rounded-lg transition-colors ${
              autoScroll 
                ? 'text-green-400 hover:text-green-300 hover:bg-gray-700' 
                : 'text-gray-400 hover:text-white hover:bg-gray-700'
            }`}
            title={autoScroll ? "T·∫Øt t·ª± ƒë·ªông scroll" : "B·∫≠t t·ª± ƒë·ªông scroll"}
          >
            {autoScroll ? 'üìå' : 'üìç'}
          </button>
          <button
            onClick={() => setShowApiKeyEditor(true)}
            className="p-2 text-gray-400 hover:text-white hover:bg-gray-700 rounded-lg transition-colors"
            title="C·∫•u h√¨nh API Keys"
          >
            <Sparkles size={18} />
          </button>
          <button
            onClick={clearChat}
            className="p-2 text-gray-400 hover:text-white hover:bg-gray-700 rounded-lg transition-colors"
            title="X√≥a cu·ªôc tr√≤ chuy·ªán"
          >
            <Trash2 size={18} />
          </button>
        </div>
      </div>

      {/* AI Provider Status */}
      <div className="mb-4 p-3 bg-gray-700 border border-gray-600 rounded-lg">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <span className="text-sm text-gray-300">ü§ñ AI Provider:</span>
                         {(() => {
               const activeProviders = aiProviders.filter(p => apiKeys[p.id]?.trim())
               if (activeProviders.length === 0) {
                 return (
                   <span className="text-sm text-red-400">
                     ‚ö†Ô∏è C·∫ßn API Key ƒë·ªÉ s·ª≠ d·ª•ng
                   </span>
                 )
               } else if (activeProviders.length === 1) {
                 return (
                   <span className="text-sm text-green-400">
                     {activeProviders[0].icon} {activeProviders[0].name}
                   </span>
                 )
               } else {
                 return (
                   <div className="flex items-center gap-2">
                     <span className="text-sm text-green-400">
                       üöÄ Multi-AI ({activeProviders.length} AIs)
                     </span>
                     <div className="flex gap-1">
                       {activeProviders.map(provider => (
                         <span key={provider.id} className="text-xs" title={provider.name}>
                           {provider.icon}
                         </span>
                       ))}
                     </div>
                   </div>
                 )
               }
             })()}
          </div>
          <button
            onClick={() => setShowApiKeyEditor(true)}
            className="text-xs text-purple-400 hover:text-purple-300 underline"
          >
            C·∫•u h√¨nh API
          </button>
        </div>
      </div>

      {/* Style Selector */}
      <div className="mb-4">
        <div className="flex items-center justify-between mb-2">
          <label className="text-sm font-medium text-gray-300">
            üé≠ Ch·ªçn phong c√°ch vi·∫øt k·ªãch b·∫£n:
          </label>
          <div className="flex gap-2">
            <button
              onClick={() => {
                // T·∫°o phong c√°ch test ƒë·ªÉ demo ch·ª©c nƒÉng x√≥a
                const testStyle: ContentStyle = {
                  id: `custom_test_${Date.now()}`,
                  name: 'Phong c√°ch Test',
                  description: 'Phong c√°ch test c√≥ th·ªÉ x√≥a ƒë∆∞·ª£c',
                  icon: 'üß™',
                  systemPrompt: 'ƒê√¢y l√† phong c√°ch test ƒë·ªÉ demo ch·ª©c nƒÉng x√≥a.'
                }
                saveCustomStyles([...customStyles, testStyle])
              }}
              className="flex items-center gap-1 px-2 py-1 text-xs bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
            >
              üß™ Test
            </button>
            <button
              onClick={() => setShowDeletedStyles(!showDeletedStyles)}
              className="flex items-center gap-1 px-2 py-1 text-xs bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors"
              title="Xem phong c√°ch ƒë√£ x√≥a"
            >
              <RefreshCw size={12} />
              <span suppressHydrationWarning>
                ƒê√£ x√≥a ({isMounted ? getHiddenStyles().length : 0})
              </span>
            </button>
            <button
              onClick={() => openStyleEditor()}
              className="flex items-center gap-1 px-2 py-1 text-xs bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors"
            >
              <Plus size={12} />
              Th√™m phong c√°ch
            </button>
          </div>
        </div>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-2">
          {(isMounted ? getVisibleStyles() : contentStyles).map((style) => (
            <div key={style.id} className="relative group">
              <button
                onClick={() => setSelectedStyle(style.id)}
                className={`w-full p-3 rounded-lg border transition-colors text-left ${
                  selectedStyle === style.id
                    ? 'bg-purple-600 border-purple-500 text-white'
                    : 'bg-gray-700 border-gray-600 text-gray-300 hover:bg-gray-600'
                }`}
                title={style.description}
              >
                <div className="flex items-center gap-2 mb-1">
                  <span className="text-lg">{style.icon}</span>
                  <span className="font-medium text-sm">{style.name}</span>
                  {style.id.startsWith('custom_') && (
                    <span className="text-xs bg-blue-600 text-white px-1 rounded">Custom</span>
                  )}
                </div>
                <p className="text-xs text-gray-400 line-clamp-2">{style.description}</p>
              </button>
              
              {/* Edit/Delete buttons - cho ph√©p x√≥a t·∫•t c·∫£ tr·ª´ "T·ªïng qu√°t" */}
              {style.id !== 'general' && (
                <div className="absolute top-1 right-1 opacity-0 group-hover:opacity-100 transition-opacity flex gap-1">
                  {/* Ch·ªâ cho edit custom styles */}
                  {style.id.startsWith('custom_') && (
                    <button
                      onClick={(e) => {
                        e.stopPropagation()
                        openStyleEditor(style)
                      }}
                      className="p-1 bg-blue-600 text-white rounded hover:bg-blue-700"
                      title="Ch·ªânh s·ª≠a"
                    >
                      <Edit3 size={10} />
                    </button>
                  )}
                  <button
                    onClick={(e) => {
                      e.stopPropagation()
                      confirmDeleteStyle(style.id)
                    }}
                    className="p-1 bg-red-600 text-white rounded hover:bg-red-700"
                    title="X√≥a phong c√°ch"
                  >
                    <Trash2 size={10} />
                  </button>
                </div>
              )}
            </div>
          ))}
        </div>

        {/* Deleted Styles Panel */}
        {showDeletedStyles && isMounted && (
          <div className="mt-4 p-3 bg-red-900/20 border border-red-600/30 rounded-lg">
            <h4 className="text-red-400 text-sm font-medium mb-2">üóëÔ∏è Phong c√°ch ƒë√£ x√≥a</h4>
            {getHiddenStyles().length === 0 ? (
              <p className="text-red-300 text-sm">Kh√¥ng c√≥ phong c√°ch n√†o b·ªã x√≥a.</p>
            ) : (
              <div className="space-y-2">
                {getHiddenStyles().map((style) => (
                  <div key={style.id} className="flex items-center justify-between p-2 bg-red-800/20 rounded border border-red-700/50">
                    <div className="flex items-center gap-2">
                      <span className="text-lg">{style.icon}</span>
                      <div>
                        <span className="text-red-200 font-medium text-sm">{style.name}</span>
                        <p className="text-red-300 text-xs">{style.description}</p>
                      </div>
                    </div>
                    <button
                      onClick={() => restoreStyle(style.id)}
                      className="px-2 py-1 text-xs bg-green-600 text-white rounded hover:bg-green-700 transition-colors"
                    >
                      Kh√¥i ph·ª•c
                    </button>
                  </div>
                ))}
                <div className="mt-3 pt-2 border-t border-red-700/50">
                  <p className="text-red-300 text-xs">
                    üí° <strong>L∆∞u √Ω:</strong> Phong c√°ch ƒë√£ x√≥a s·∫Ω kh√¥ng t·ª± ƒë·ªông kh√¥i ph·ª•c. 
                    B·∫°n c·∫ßn ch·ªçn t·ª´ng phong c√°ch ƒë·ªÉ kh√¥i ph·ª•c ri√™ng bi·ªát.
                  </p>
                </div>
              </div>
            )}
          </div>
        )}
      </div>

      {/* Chat Messages */}
      <div 
        className="bg-gray-900 border border-gray-700 rounded-lg p-4 h-96 overflow-y-auto mb-4"
        onScroll={handleScroll}
      >
        {messages.map((message) => (
          <div
            key={message.id}
            className={`flex gap-3 mb-4 ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
          >
            {message.type === 'bot' && (
              <div className="p-1.5 bg-purple-600 rounded-full flex-shrink-0 h-fit">
                <Bot size={16} className="text-white" />
              </div>
            )}
            
            <div className={`max-w-[80%] ${message.type === 'user' ? 'order-2' : ''}`}>
              <div
                className={`p-3 rounded-lg ${
                  message.type === 'user'
                    ? 'bg-blue-600 text-white'
                    : 'bg-gray-800 text-gray-200 border border-gray-600'
                }`}
              >
                <div className="whitespace-pre-wrap text-sm leading-relaxed">
                  {message.content}
                </div>
                
                {message.type === 'bot' && (
                  <div className="flex items-center justify-between mt-2 pt-2 border-t border-gray-600">
                    <span className="text-xs text-gray-500">
                      {message.timestamp.toLocaleTimeString('vi-VN', { 
                        hour: '2-digit', 
                        minute: '2-digit' 
                      })}
                    </span>
                    <button
                      onClick={() => copyMessage(message.content, message.id)}
                      className="flex items-center gap-1 px-2 py-1 text-xs text-gray-400 hover:text-white hover:bg-gray-700 rounded transition-colors"
                    >
                      {showCopied === message.id ? (
                        <>
                          <Check size={12} />
                          ƒê√£ copy
                        </>
                      ) : (
                        <>
                          <Copy size={12} />
                          Copy
                        </>
                      )}
                    </button>
                  </div>
                )}
              </div>
            </div>

            {message.type === 'user' && (
              <div className="p-1.5 bg-blue-600 rounded-full flex-shrink-0 h-fit order-3">
                <User size={16} className="text-white" />
              </div>
            )}
          </div>
        ))}

        {(isTyping || showAiProgress || isRefining) && (
          <div className="flex gap-3 mb-4">
            <div className="p-1.5 bg-purple-600 rounded-full flex-shrink-0 h-fit">
              <Bot size={16} className="text-white" />
            </div>
            <div className="bg-gray-800 border border-gray-600 rounded-lg p-3 min-w-0 flex-1">
              {isRefining ? (
                <div className="flex items-center gap-1">
                  <div className="flex gap-1">
                    <div className="w-2 h-2 bg-orange-500 rounded-full animate-bounce"></div>
                    <div className="w-2 h-2 bg-orange-500 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                    <div className="w-2 h-2 bg-orange-500 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                  </div>
                  <span className="text-sm text-orange-400 ml-2">üõ†Ô∏è ƒêang ch·ªânh s·ª≠a k·ªãch b·∫£n theo y√™u c·∫ßu c·ªßa b·∫°n...</span>
                </div>
              ) : !showAiProgress ? (
                <div className="flex items-center gap-1">
                  <div className="flex gap-1">
                    <div className="w-2 h-2 bg-purple-500 rounded-full animate-bounce"></div>
                    <div className="w-2 h-2 bg-purple-500 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                    <div className="w-2 h-2 bg-purple-500 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                  </div>
                  <span className="text-sm text-gray-400 ml-2">ƒêang vi·∫øt k·ªãch b·∫£n...</span>
                </div>
              ) : (
                <div className="space-y-2">
                  <div className="text-sm text-gray-400 mb-3">üöÄ ƒêang g·ªçi multiple AI ƒë·ªÉ t·∫°o k·ªãch b·∫£n t·ªët nh·∫•t...</div>
                  {aiProviders.filter(p => apiKeys[p.id]?.trim()).map(provider => (
                    <div key={provider.id} className="flex items-center gap-3">
                      <span className="text-lg">{provider.icon}</span>
                      <span className="text-sm text-gray-300 min-w-0 flex-1">{provider.name}</span>
                      <div className="flex items-center gap-1">
                        {aiProgress[provider.id] === 'waiting' && (
                          <span className="text-xs text-gray-500">Ch·ªù...</span>
                        )}
                        {aiProgress[provider.id] === 'processing' && (
                          <div className="flex gap-1">
                            <div className="w-1.5 h-1.5 bg-blue-500 rounded-full animate-bounce"></div>
                            <div className="w-1.5 h-1.5 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                            <div className="w-1.5 h-1.5 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                          </div>
                        )}
                        {aiProgress[provider.id] === 'completed' && (
                          <span className="text-xs text-green-400">‚úì Ho√†n th√†nh</span>
                        )}
                        {aiProgress[provider.id] === 'error' && (
                          <span className="text-xs text-red-400">‚úó L·ªói</span>
                        )}
                      </div>
                    </div>
                  ))}
                  
                  {Object.values(aiProgress).some(status => status === 'completed') && 
                   Object.values(aiProgress).every(status => status !== 'processing') && (
                    <div className="mt-3 pt-2 border-t border-gray-600">
                      <div className="flex items-center gap-2">
                        <div className="flex gap-1">
                          <div className="w-1.5 h-1.5 bg-purple-500 rounded-full animate-bounce"></div>
                          <div className="w-1.5 h-1.5 bg-purple-500 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                          <div className="w-1.5 h-1.5 bg-purple-500 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                        </div>
                        <span className="text-sm text-purple-400">ƒêang t·ªïng h·ª£p k·∫øt qu·∫£...</span>
                      </div>
                    </div>
                  )}
                </div>
              )}
            </div>
          </div>
        )}
        
        <div ref={messagesEndRef} />
      </div>

                {/* New Script Notice */}
      {showNewScriptNotice && (
        <div className="mb-4 p-3 bg-green-900/20 border border-green-600/30 rounded-lg animate-pulse">
          <div className="flex items-center gap-2">
            <span className="text-green-400">üéâ</span>
            <span className="text-green-300 text-sm font-medium">
              K·ªãch b·∫£n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng! B√¢y gi·ªù b·∫°n c√≥ th·ªÉ y√™u c·∫ßu ch·ªânh s·ª≠a.
            </span>
          </div>
        </div>
      )}

      {/* Script Context Info */}
      {currentScript && (
        <div className="mb-4 p-3 bg-blue-900/20 border border-blue-600/30 rounded-lg">
          <div className="flex items-center justify-between mb-2">
            <div className="flex items-center gap-2">
              <span className="text-blue-400 font-medium">üìã K·ªãch b·∫£n hi·ªán t·∫°i</span>
              <span className="text-xs bg-blue-600 text-white px-2 py-1 rounded">v{scriptVersion}</span>
            </div>
            <div className="flex gap-2">
              <button
                onClick={() => setShowHistory(!showHistory)}
                className="text-xs text-blue-400 hover:text-blue-300 underline"
              >
                {showHistory ? '·∫®n l·ªãch s·ª≠' : 'Xem l·ªãch s·ª≠'}
              </button>
              <button
                onClick={() => {
                  setCurrentScript('')
                  setScriptVersion(0)
                  setScriptHistory([])
                }}
                className="text-xs text-red-400 hover:text-red-300 underline"
              >
                B·ªè context
              </button>
            </div>
          </div>
          <div className="space-y-2">
            <p className="text-blue-300 text-sm">
              üí° <strong>T√≠nh nƒÉng ch·ªânh s·ª≠a k·ªãch b·∫£n ƒëang ho·∫°t ƒë·ªông!</strong>
            </p>
            <p className="text-blue-200 text-xs">
              B·∫°n c√≥ th·ªÉ y√™u c·∫ßu ch·ªânh s·ª≠a k·ªãch b·∫£n n√†y b·∫±ng c√°ch n√≥i: 
              <br />
              <span className="italic font-mono bg-blue-900/30 px-1 rounded">
                &quot;S·ª≠a ph·∫ßn ƒë·ªëi tho·∫°i&quot;, &quot;Thay ƒë·ªïi nh√¢n v·∫≠t&quot;, &quot;Th√™m √¢m thanh&quot;, &quot;B·ªõt qu√° d√†i&quot;, &quot;L√†m ng·∫Øn h∆°n&quot;, v.v.
              </span>
            </p>
            <div className="flex flex-wrap gap-1 mt-2">
              {[
                'S·ª≠a l·ªùi tho·∫°i',
                'Thay ƒë·ªïi b·ªëi c·∫£nh',
                'Th√™m c·∫£nh',
                'B·ªõt d√†i',
                'ƒê·ªïi nh√¢n v·∫≠t',
                'Th√™m √¢m thanh'
              ].map((suggestion, index) => (
                <button
                  key={index}
                  onClick={() => setInputMessage(suggestion.toLowerCase())}
                  className="text-xs bg-blue-600/30 hover:bg-blue-600/50 text-blue-300 px-2 py-1 rounded transition-colors"
                >
                  {suggestion}
                </button>
              ))}
            </div>
          </div>
          {/* Script History */}
          {showHistory && scriptHistory.length > 0 && (
            <div className="mt-3 p-3 bg-gray-800 rounded-lg max-h-60 overflow-y-auto">
              <h4 className="text-blue-400 text-sm font-medium mb-2">üìö L·ªãch s·ª≠ k·ªãch b·∫£n</h4>
              <div className="space-y-2">
                {scriptHistory.map((item, index) => (
                  <div key={index} className="border border-gray-700 rounded p-2">
                    <div className="flex items-center justify-between mb-1">
                      <span className="text-xs text-blue-300">
                        Phi√™n b·∫£n {item.version} - {item.timestamp.toLocaleString('vi-VN')}
                      </span>
                      <button
                        onClick={() => {
                          setCurrentScript(item.content)
                          setScriptVersion(item.version)
                        }}
                        className="text-xs text-green-400 hover:text-green-300 underline"
                      >
                        Kh√¥i ph·ª•c
                      </button>
                    </div>
                    <div className="text-xs text-gray-400 truncate">
                      {item.content.substring(0, 100)}...
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      )}

      {/* Input Area */}
      <div className="flex gap-2">
        <input
          type="text"
          value={inputMessage}
          onChange={(e) => setInputMessage(e.target.value)}
          onKeyPress={(e) => e.key === 'Enter' && !e.shiftKey && handleSendMessage()}
          placeholder={
            currentScript 
              ? "Y√™u c·∫ßu ch·ªânh s·ª≠a k·ªãch b·∫£n... (VD: S·ª≠a l·ªùi tho·∫°i cho hay h∆°n, th√™m √¢m thanh)"
              : "M√¥ t·∫£ video b·∫°n mu·ªën t·∫°o k·ªãch b·∫£n... (VD: Video 30s v·ªÅ c√¥ g√°i u·ªëng c√† ph√™)"
          }
          className="flex-1 px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 text-white placeholder-gray-400"
          disabled={isTyping || isRefining}
        />
        <button
          onClick={handleSendMessage}
          disabled={isTyping || isRefining || !inputMessage.trim()}
          className="px-4 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center gap-2"
        >
          <Send size={18} />
          <span className="hidden sm:inline">
            {currentScript ? 'Ch·ªânh s·ª≠a' : 'G·ª≠i'}
          </span>
        </button>
      </div>

      {!aiProviders.some(p => apiKeys[p.id]?.trim()) && (
        <div className="mt-3 p-3 bg-red-900/20 border border-red-600/30 rounded-lg">
          <div className="flex items-center gap-2 mb-2">
            <Sparkles size={16} className="text-red-400" />
            <span className="text-sm font-medium text-red-400">‚ö†Ô∏è Y√™u c·∫ßu AI API Key</span>
          </div>
          <p className="text-xs text-red-300 mb-2">
            D·ª± √°n n√†y ch·ªâ s·ª≠ d·ª•ng AI APIs th·∫≠t. Vui l√≤ng th√™m √≠t nh·∫•t m·ªôt API key ƒë·ªÉ s·ª≠ d·ª•ng:
          </p>
          <div className="flex flex-wrap gap-2">
            {aiProviders.map(provider => (
              <span key={provider.id} className="text-xs bg-red-800/30 text-red-200 px-2 py-1 rounded">
                {provider.icon} {provider.name}
              </span>
            ))}
          </div>
        </div>
      )}

      {/* Style Editor Modal */}
      {showStyleEditor && editingStyle && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-gray-800 border border-gray-600 rounded-lg p-6 w-full max-w-2xl mx-4 max-h-[80vh] overflow-y-auto">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-white">
                {editingStyle.id.startsWith('custom_') && editingStyle.name ? 'Ch·ªânh s·ª≠a phong c√°ch' : 'T·∫°o phong c√°ch m·ªõi'}
              </h3>
              <button
                onClick={() => setShowStyleEditor(false)}
                className="text-gray-400 hover:text-white"
              >
                <X size={20} />
              </button>
            </div>

            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  Icon (emoji):
                </label>
                <input
                  type="text"
                  value={editingStyle.icon}
                  onChange={(e) => setEditingStyle({...editingStyle, icon: e.target.value})}
                  className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                  placeholder="üé≠"
                  maxLength={4}
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  T√™n phong c√°ch:
                </label>
                <input
                  type="text"
                  value={editingStyle.name}
                  onChange={(e) => setEditingStyle({...editingStyle, name: e.target.value})}
                  className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                  placeholder="VD: Khoa h·ªçc, T√¢m l√Ω h·ªçc, Marketing..."
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  M√¥ t·∫£ ng·∫Øn:
                </label>
                <input
                  type="text"
                  value={editingStyle.description}
                  onChange={(e) => setEditingStyle({...editingStyle, description: e.target.value})}
                  className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500"
                  placeholder="M√¥ t·∫£ ng·∫Øn g·ªçn v·ªÅ phong c√°ch n√†y..."
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  System Prompt (H∆∞·ªõng d·∫´n AI):
                </label>
                <textarea
                  value={editingStyle.systemPrompt}
                  onChange={(e) => setEditingStyle({...editingStyle, systemPrompt: e.target.value})}
                  className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500 h-32 resize-none"
                  placeholder="B·∫°n l√† m·ªôt chuy√™n gia [lƒ©nh v·ª±c]. Vi·∫øt k·ªãch b·∫£n v·ªõi gi·ªçng ƒëi·ªáu [ƒë·∫∑c ƒëi·ªÉm], s·ª≠ d·ª•ng [thu·∫≠t ng·ªØ/phong c√°ch]. Lu√¥n nh·∫•n m·∫°nh [ƒëi·ªÉm ƒë·∫∑c bi·ªát]..."
                />
                <p className="text-xs text-gray-400 mt-1">
                  H∆∞·ªõng d·∫´n n√†y s·∫Ω gi√∫p AI vi·∫øt k·ªãch b·∫£n theo phong c√°ch b·∫°n mong mu·ªën
                </p>
              </div>
            </div>

            <div className="flex gap-3 mt-6">
              <button
                onClick={saveStyle}
                disabled={!editingStyle.name.trim() || !editingStyle.systemPrompt.trim()}
                className="flex items-center gap-2 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                <Save size={16} />
                L∆∞u phong c√°ch
              </button>
              <button
                onClick={() => setShowStyleEditor(false)}
                className="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors"
              >
                H·ªßy
              </button>
            </div>
                     </div>
         </div>
       )}

      {/* Delete Confirmation Modal */}
      {showDeleteConfirm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-gray-800 border border-gray-600 rounded-lg p-6 w-full max-w-md mx-4">
            <div className="flex items-center gap-3 mb-4">
              <div className="p-2 bg-red-600 rounded-lg">
                <Trash2 size={20} className="text-white" />
              </div>
              <h3 className="text-lg font-semibold text-white">X√°c nh·∫≠n x√≥a phong c√°ch</h3>
            </div>
            
            <div className="mb-6">
              <p className="text-gray-300 mb-2">
                B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a phong c√°ch n√†y kh√¥ng?
              </p>
              <div className="bg-gray-700 border border-gray-600 rounded-lg p-3">
                {(() => {
                  const styleToDelete = getVisibleStyles().find(s => s.id === showDeleteConfirm)
                  return styleToDelete ? (
                    <div className="flex items-center gap-2">
                      <span className="text-lg">{styleToDelete.icon}</span>
                      <div>
                        <p className="text-white font-medium">{styleToDelete.name}</p>
                        <p className="text-gray-400 text-sm">{styleToDelete.description}</p>
                      </div>
                    </div>
                  ) : null
                })()}
              </div>
              <p className="text-red-400 text-sm mt-2">
                ‚ö†Ô∏è H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ kh√¥i ph·ª•c!
              </p>
            </div>

            <div className="flex gap-3">
              <button
                onClick={() => deleteStyle(showDeleteConfirm)}
                className="flex items-center gap-2 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
              >
                <Trash2 size={16} />
                X√≥a phong c√°ch
              </button>
              <button
                onClick={() => setShowDeleteConfirm(null)}
                className="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors"
              >
                H·ªßy
              </button>
            </div>
                     </div>
         </div>
       )}

      {/* API Key Editor Modal */}
      {showApiKeyEditor && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-gray-800 border border-gray-600 rounded-lg p-6 w-full max-w-2xl mx-4 max-h-[80vh] overflow-y-auto">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center gap-2">
                <Sparkles size={20} className="text-purple-400" />
                <h3 className="text-lg font-semibold text-white">C·∫•u h√¨nh AI API Keys</h3>
              </div>
              <button
                onClick={() => setShowApiKeyEditor(false)}
                className="text-gray-400 hover:text-white"
              >
                <X size={20} />
              </button>
            </div>

            <div className="space-y-6">
              <p className="text-gray-300 text-sm">
                Th√™m API key cho c√°c AI models ƒë·ªÉ t·∫°o k·ªãch b·∫£n ch·∫•t l∆∞·ª£ng cao. Ch·ªâ c·∫ßn m·ªôt API key l√† ƒë·ªß.
              </p>

              {aiProviders.map((provider) => (
                <div key={provider.id} className="space-y-3">
                  <div className="flex items-center gap-3">
                    <span className="text-2xl">{provider.icon}</span>
                    <div>
                      <h4 className="text-white font-medium">{provider.name}</h4>
                      <p className="text-gray-400 text-sm">
                        {provider.id === 'openai' && 'GPT-3.5/GPT-4 - L·∫•y t·ª´ platform.openai.com'}
                        {provider.id === 'gemini' && 'Gemini Pro - L·∫•y t·ª´ ai.google.dev'}
                        {provider.id === 'claude' && 'Claude 3 - L·∫•y t·ª´ console.anthropic.com'}
                      </p>
                    </div>
                    {apiKeys[provider.id]?.trim() && (
                      <span className="text-xs bg-green-600 text-white px-2 py-1 rounded">
                        ‚úì ƒê√£ c·∫•u h√¨nh
                      </span>
                    )}
                  </div>
                  
                  <div className="relative">
                    <input
                      type="password"
                      value={apiKeys[provider.id] || ''}
                      onChange={(e) => {
                        const newKeys = { ...apiKeys, [provider.id]: e.target.value }
                        saveApiKeys(newKeys)
                      }}
                      placeholder={provider.placeholder}
                      className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500 pr-24"
                    />
                    {apiKeys[provider.id]?.trim() && (
                      <button
                        onClick={() => {
                          const newKeys = { ...apiKeys, [provider.id]: '' }
                          saveApiKeys(newKeys)
                        }}
                        className="absolute right-2 top-1/2 transform -translate-y-1/2 text-xs text-red-400 hover:text-red-300"
                      >
                        X√≥a
                      </button>
                    )}
                  </div>
                </div>
              ))}

              <div className="p-4 bg-blue-900/20 border border-blue-600/30 rounded-lg">
                <h5 className="text-blue-400 font-medium mb-2">üí° H∆∞·ªõng d·∫´n l·∫•y API Key:</h5>
                <ul className="text-blue-300 text-sm space-y-1">
                  <li>‚Ä¢ <strong>OpenAI:</strong> platform.openai.com ‚Üí API keys ‚Üí Create new key</li>
                  <li>‚Ä¢ <strong>Gemini:</strong> ai.google.dev ‚Üí Get API key ‚Üí Create key</li>
                  <li>‚Ä¢ <strong>Claude:</strong> console.anthropic.com ‚Üí API Keys ‚Üí Create key</li>
                </ul>
              </div>
            </div>

            <div className="flex gap-3 mt-6">
              <button
                onClick={() => setShowApiKeyEditor(false)}
                className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors"
              >
                Xong
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
} 